{"version":3,"sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/signup/signup.component.ts","./src/app/auth/signup/signup.component.html"],"names":[],"mappings":"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","file":"auth-auth-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'signup', component: SignupComponent}\r\n]\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { AngularMaterialModule } from '../angular-material.module';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponent,\r\n    SignupComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    AngularMaterialModule,\r\n    FormsModule,\r\n    AuthRoutingModule\r\n  ]\r\n})\r\nexport class AuthModule {}\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { AuthService } from '../auth.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy{\r\n  isLoading = false;\r\n  private authStatusSub: Subscription;\r\n\r\n  constructor(public authService: AuthService){}\r\n\r\n  ngOnInit() {\r\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(\r\n      authStatus => {\r\n        this.isLoading = false;\r\n      }\r\n    );\r\n  }\r\n\r\n  onLogin(form: NgForm){\r\n    //console.log(form.value); test if form is sending values\r\n    if (form.invalid){\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    this.authService.login(form.value.email, form.value.password);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.authStatusSub.unsubscribe()\r\n  }\r\n}\r\n","<mat-card>\r\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n  <form (submit)=\"onLogin(loginForm)\" #loginForm=\"ngForm\" *ngIf=\"!isLoading\">\r\n    <mat-form-field>\r\n      <input matInput name=\"email\" ngModel\r\n      type=\"email\"\r\n      placeholder=\"E-Mail\"\r\n      #emailInput=\"ngModel\"\r\n      required\r\n      email>\r\n        <mat-error *ngIf=\"emailInput.invalid\">Please enter a valid email.</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field>\r\n      <input type=\"password\" matInput\r\n      name=\"password\" ngModel\r\n      placeholder=\"Password\"\r\n      #passwordInput=\"ngModel\"\r\n      required>\r\n        <mat-error *ngIf=\"passwordInput.invalid\">Please enter a valid password.</mat-error>\r\n    </mat-form-field>\r\n\r\n    <button mat-raised-button color='primary' type=\"submit\" *ngIf=\"!isLoading\">\r\n      Login\r\n    </button>\r\n\r\n  </form>\r\n</mat-card>\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\n\r\nimport { AuthService } from \"../auth.service\";\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  templateUrl: \"./signup.component.html\",\r\n  styleUrls: [\"./signup.component.css\"]\r\n})\r\nexport class SignupComponent implements OnInit, OnDestroy{\r\n  isLoading = false;\r\n  private authStatusSub: Subscription;\r\n\r\n  constructor(public authService: AuthService) {}\r\n\r\n  ngOnInit() {\r\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(\r\n      authStatus => {\r\n        this.isLoading = false;\r\n      }\r\n    );\r\n  }\r\n\r\n  onSignup(form: NgForm){\r\n    //console.log(form.value);\r\n    if (form.invalid){\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    this.authService.createUser(form.value.email, form.value.password);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.authStatusSub.unsubscribe();\r\n  }\r\n}\r\n","<mat-card>\r\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n  <form (submit)=\"onSignup(signupForm)\" #signupForm=\"ngForm\" *ngIf=\"!isLoading\">\r\n    <mat-form-field>\r\n      <input matInput name=\"email\" ngModel\r\n      type=\"email\"\r\n      placeholder=\"E-Mail\"\r\n      #emailInput=\"ngModel\"\r\n      required\r\n      email>\r\n        <mat-error *ngIf=\"emailInput.invalid\">Please enter a valid email.</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field>\r\n      <input type=\"password\" matInput\r\n      name=\"password\" ngModel\r\n      placeholder=\"Password\"\r\n      #passwordInput=\"ngModel\"\r\n      required>\r\n        <mat-error *ngIf=\"passwordInput.invalid\">Please enter a valid password.</mat-error>\r\n    </mat-form-field>\r\n\r\n    <button mat-raised-button color='primary' type=\"submit\" *ngIf=\"!isLoading\">\r\n      Sign Up\r\n    </button>\r\n\r\n  </form>\r\n</mat-card>\r\n"],"sourceRoot":"webpack:///"}