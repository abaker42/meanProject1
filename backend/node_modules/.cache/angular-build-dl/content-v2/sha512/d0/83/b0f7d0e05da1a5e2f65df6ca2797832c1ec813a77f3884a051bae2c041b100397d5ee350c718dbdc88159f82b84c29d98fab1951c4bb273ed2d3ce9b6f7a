{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/angular-material.module.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/auth/auth-interceptor.ts","webpack:///src/app/auth/auth.guard.ts","webpack:///src/app/auth/auth.service.ts","webpack:///src/app/error-interceptor.ts","webpack:///src/app/error/error.component.ts","webpack:///src/app/error/error.component.html","webpack:///src/app/header/header.component.ts","webpack:///src/app/header/header.component.html","webpack:///src/app/posts/post-create/mime-type.validator.ts","webpack:///src/app/posts/post-create/post-create.component.ts","webpack:///src/app/posts/post-create/post-create.component.html","webpack:///src/app/posts/post-list/post-list.component.ts","webpack:///src/app/posts/post-list/post-list.component.html","webpack:///src/app/posts/posts.module.ts","webpack:///src/app/posts/posts.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AngularMaterialModule","routes","path","component","canActivate","loadChildren","m","AuthModule","AppRoutingModule","forRoot","relativeLinkResolution","imports","providers","AppComponent","authService","autoAuthUser","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","declarations","bootstrap","entryComponents","AuthInterceptor","next","authToken","getToken","authRequest","clone","headers","set","handle","AuthGuard","router","route","state","isAuth","getUserAuth","navigate","BACKEND_URL","apiUrl","AuthService","http","userAuthenticated","authStatusListener","token","userId","asObservable","email","password","authData","post","subscribe","error","response","expiresInDuration","expiresIn","setAuthTimer","now","Date","expirationDate","getTime","saveAuthData","authInfo","getAuthData","clearTimeout","tokenTimer","clearAuthData","duration","console","log","setTimeout","logout","alert","expiratonDate","localStorage","setItem","toISOString","removeItem","getItem","providedIn","ErrorInterceptor","dialog","pipe","errorMessage","message","open","data","ErrorComponent","HeaderComponent","authListenerSubs","getAuthStatusListener","goodAuth","unsubscribe","mimeType","control","value","file","fileReader","FileReader","frObs","create","observer","addEventListener","arr","Uint8Array","result","subarray","header","isValid","i","length","toString","invalidMimeType","complete","readAsArrayBuffer","PostCreateComponent","postsService","enteredContent","enteredTitle","isLoading","mode","authStatusSub","authStatus","form","validators","required","minLength","asyncValidators","paramMap","has","postId","get","getPost","postData","_id","title","content","imagePath","creator","setValue","event","target","files","patchValue","image","updateValueAndValidity","reader","onload","imagePreview","readAsDataURL","invalid","addPost","updatePost","reset","PostListComponent","posts","totalPosts","postsPerPage","currentPage","pageSizeOptions","getPosts","getUserId","postsSub","getPostUpdateListener","postCount","pageData","pageIndex","pageSize","deletePost","PostsModule","PostsService","postsUpdated","queryParams","map","maxPosts","mutatedPostData","FormData","append","responseData","put","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { MatInputModule } from '@angular/material/input';//all angular material css must be\r\nimport { MatCardModule } from '@angular/material/card';//imported and added to imports array\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\n@NgModule({\r\n  exports: [\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatProgressSpinnerModule,\r\n    MatPaginatorModule,\r\n    MatDialogModule\r\n  ]\r\n})\r\nexport class AngularMaterialModule {}\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PostListComponent } from './posts/post-list/post-list.component';\nimport { PostCreateComponent } from './posts/post-create/post-create.component';\nimport { AuthGuard } from './auth/auth.guard';\n\n\nconst routes: Routes = [\n  { path: '', component:  PostListComponent },\n  { path: 'create', component: PostCreateComponent, canActivate: [AuthGuard] },\n  { path: 'edit/:postId', component: PostCreateComponent, canActivate: [AuthGuard] },\n  { path: 'auth', loadChildren: () => import('./auth/auth.module')\n    .then(m => m.AuthModule)}//these routes load only when needed (lazy loading)\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\n  exports: [RouterModule],\n  providers: [AuthGuard]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from './auth/auth.service';\n\n//import { Post } from './posts/post.model';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n\n  constructor(private authService: AuthService){}\n\n  ngOnInit(){\n    this.authService.autoAuthUser();\n  }\n}\n","<app-header></app-header>\n<h1>Type Post in Box Below </h1>\n<main>\n  <!--<app-post-create ></app-post-create>\n  <app-post-list ></app-post-list>\n  NgRouting allows us to forget these tags and execute code below-->\n  <router-outlet></router-outlet>\n\n</main>\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\nimport { AuthInterceptor } from './auth/auth-interceptor';\nimport { ErrorInterceptor } from './error-interceptor';\nimport { ErrorComponent } from './error/error.component';\nimport { AngularMaterialModule } from './angular-material.module';\nimport { PostsModule } from './posts/posts.module';\n\n\n@NgModule({\n  declarations: [//list of all components used in app.. The export class ref in .ts files\n    AppComponent,\n    HeaderComponent,\n    ErrorComponent\n  ],\n  imports: [//list all libraries imports from angular\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule, //used in service to make http req\n    AngularMaterialModule,\n    PostsModule\n\n  ],\n  providers: [\n    {provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true},\n    {provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true}\n  ],\n  bootstrap: [AppComponent],\n  entryComponents: [ErrorComponent]\n})\nexport class AppModule { }\n","import { HttpInterceptor, HttpRequest, HttpHandler } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private authService: AuthService) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler){\r\n    const authToken = this.authService.getToken();\r\n    const authRequest = req.clone({\r\n      headers: req.headers.set('Authorization', \"Bearer: \"+ authToken)\r\n    });\r\n    return next.handle (authRequest)\r\n  }\r\n}\r\n","import {\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  UrlTree,\r\n  Router\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate{\r\n\r\n  constructor(private authService: AuthService, private router: Router){}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): boolean | UrlTree | Observable<boolean |\r\n    UrlTree> | Promise<boolean | UrlTree> {\r\n      const isAuth = this.authService.getUserAuth();\r\n      if (!isAuth){\r\n        this.router.navigate(['/auth/login']);\r\n      }\r\n      return isAuth;\r\n  }\r\n\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AuthData } from './auth-data.model';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { environment } from '../../environments/environment';\r\nconst BACKEND_URL = environment.apiUrl + '/user/';\r\n\r\n/**All console log statements here show in the internet console */\r\n\r\n@Injectable({ providedIn: \"root\"})\r\nexport class AuthService {\r\n  private userAuthenticated = false;\r\n  private token: string;\r\n  private authStatusListener = new Subject<boolean>();\r\n  private tokenTimer: any;\r\n  private userId: string;\r\n\r\n  constructor(private http: HttpClient, private router: Router){}\r\n\r\n  getToken(){//use this method to get the private token\r\n    return this.token;\r\n  }\r\n\r\n  getUserAuth(){\r\n    return this.userAuthenticated;\r\n  }\r\n\r\n  getUserId(){\r\n    return this.userId\r\n  }\r\n\r\n  getAuthStatusListener(){\r\n    return this.authStatusListener.asObservable();\r\n  }\r\n\r\n  createUser(email: string, password: string){\r\n    const authData: AuthData = {email: email, password: password};\r\n    this.http\r\n      .post(BACKEND_URL + \"/signup\", authData)\r\n      .subscribe(() => {\r\n        //console.log(response);\r\n        this.router.navigate(['/']);\r\n      }, error => {\r\n        this.authStatusListener.next(false);\r\n      });\r\n  }\r\n\r\n  login(email: string, password: string){\r\n    const authData: AuthData = {email: email, password: password};\r\n    this.http.post<{ token: string, expiresIn: number, userId: string }>(BACKEND_URL + \"/login\", authData)\r\n      .subscribe(response => {\r\n        //console.log(response);//test if token logged\r\n        const token = response.token;\r\n        this.token = token;\r\n        if (token){\r\n          const expiresInDuration = response.expiresIn;\r\n          this.setAuthTimer(expiresInDuration);\r\n          this.userAuthenticated = true;\r\n          this.userId = response.userId;\r\n          this.authStatusListener.next(true);\r\n          const now = new Date();// get current time stamp\r\n          const expirationDate = new Date(now.getTime() + expiresInDuration * 1000);\r\n          //console.log(expirationDate);//test if we get right dateStamp\r\n          this.saveAuthData(token, expirationDate, this.userId)\r\n          this.router.navigate(['/']);\r\n        }\r\n      }, error => {\r\n        this.authStatusListener.next(false);\r\n      })\r\n  }\r\n\r\n  //This method initializs auth status if we leave the page\r\n  autoAuthUser() {\r\n    const authInfo = this.getAuthData();\r\n    if (!authInfo) {\r\n      return;\r\n    }\r\n    const now = new Date();\r\n    const expiresIn = authInfo.expirationDate.getTime() - now.getTime();\r\n    //console.log(authInfo, expiresIn);//test if we makie into if block with token info\r\n    if(expiresIn > 0){\r\n      this.token = authInfo.token;\r\n      this.userAuthenticated = true;\r\n      this.userId = authInfo.userId;\r\n      this.setAuthTimer(expiresIn / 1000);\r\n      this.authStatusListener.next(true);\r\n    }\r\n  }\r\n\r\n  logout(){\r\n    this.token = null;\r\n    this.userId = null;\r\n    this.userAuthenticated = false;\r\n    this.authStatusListener.next(false);\r\n    clearTimeout(this.tokenTimer);\r\n    this.clearAuthData();\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  private setAuthTimer(duration: number){\r\n    console.log(\"Setting timer: \" + duration);\r\n    this.tokenTimer = setTimeout( () => {\r\n      this.logout();\r\n      alert('Token Expired');\r\n    }, duration *1000 );\r\n  }\r\n\r\n  //save login info so when users leave and comeback they remain logged in\r\n  private saveAuthData(token: string, expiratonDate: Date, userId: string) {\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('expiration', expiratonDate.toISOString());\r\n    localStorage.setItem('userId', userId)\r\n  }\r\n\r\n  private clearAuthData(){\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem(\"expiration\");\r\n    localStorage.removeItem('userId');\r\n  }\r\n\r\n  private getAuthData() {\r\n    const token = localStorage.getItem('token');\r\n    const expirationDate = localStorage.getItem('expiration');\r\n    const userId = localStorage.getItem('userId');\r\n    if (!token || !expirationDate){\r\n      return;\r\n    }\r\n    return {\r\n      token: token,\r\n      expirationDate: new Date(expirationDate),\r\n      userId: userId\r\n    }\r\n  }\r\n}\r\n","import { HttpInterceptor, HttpRequest, HttpHandler, HttpErrorResponse } from '@angular/common/http';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ErrorComponent } from './error/error.component';\r\n\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private dialog: MatDialog) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler){\r\n    return next.handle(req).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        // console.log(error);\r\n        let errorMessage = \"Unknown Error Occurred!\"\r\n        if (error.error.message) {\r\n          errorMessage = error.error.message\r\n        }\r\n        this.dialog.open(ErrorComponent, {data: {message: errorMessage}});\r\n        return throwError(error);\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  templateUrl: './error.component.html'\r\n})\r\nexport class ErrorComponent {\r\n  constructor(@Inject(MAT_DIALOG_DATA)public data: {message: string}) {}\r\n}\r\n","<h1 mat-dialog-title>Oh no! Something went wrong</h1>\r\n<div mat-dialog-content>\r\n  <p>{{ data.message }}</p>\r\n</div>\r\n<div mat-dialog-actions>\r\n  <button mat-button mat-dialog-close>OK</button>\r\n</div>\r\n","/*When creating a new component you normally create a filename.ts, filename.html, and filename.css.\r\nThe css file is optional. In the .ts file you must export your class and import component from\r\nangular/core so this new component can be recognized by the app. Each component needs a selector\r\n(html tag name) and templateURL (file path to corresponding html file)*/\r\n\r\nimport {Component, OnInit, OnDestroy} from \"@angular/core\";\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\nselector: 'app-header',\r\ntemplateUrl: './header.component.html',\r\nstyleUrls: ['./header.component.css']\r\n})\r\nexport class HeaderComponent implements OnInit, OnDestroy{\r\n\r\n userAuthenticated = false;\r\n private authListenerSubs: Subscription;\r\n\r\n  constructor(private authService: AuthService){}\r\n\r\n  ngOnInit(){\r\n    this.userAuthenticated = this.authService.getUserAuth();\r\n    this.authListenerSubs = this.authService\r\n      .getAuthStatusListener()\r\n      .subscribe(goodAuth => {\r\n        this.userAuthenticated = goodAuth;\r\n      });\r\n  }\r\n\r\n  onLogout(){\r\n    this.authService.logout();\r\n  }\r\n\r\n  ngOnDestroy(){\r\n    this.authListenerSubs.unsubscribe();\r\n  }\r\n}\r\n","<mat-toolbar color=\"primary\">\r\n  <span>\r\n    <a routerLink=\"/\">My Messages</a>\r\n  </span>\r\n  <span class=\"spacer\"></span>\r\n  <ul>\r\n    <li *ngIf=\"!userAuthenticated\">\r\n      <a mat-stroked-button routerLink=\"/auth/signup\" routerLinkActive=\"mat-accent\">Sign Up</a>\r\n    </li>\r\n\r\n    <li *ngIf=\"!userAuthenticated\">\r\n      <a mat-stroked-button routerLink=\"/auth/login\" routerLinkActive=\"mat-accent\">Login</a>\r\n    </li>\r\n\r\n    <li *ngIf=\"userAuthenticated\">\r\n      <a mat-stroked-button routerLink=\"/create\" routerLinkActive=\"mat-accent\">New Post</a>\r\n    </li>\r\n\r\n    <li *ngIf=\"userAuthenticated\">\r\n      <a mat-stroked-button routerLink=\"/\" routerLinkActive=\"\">Saved Posts</a>\r\n    </li>\r\n\r\n    <li *ngIf=\"userAuthenticated\">\r\n      <button mat-button (click)=\"onLogout()\">Logout</button>\r\n    </li>\r\n  </ul>\r\n\r\n</mat-toolbar>\r\n","import { AbstractControl } from \"@angular/forms\";\r\nimport { Observable, Observer, of } from 'rxjs';\r\n\r\nexport const mimeType = (\r\n  control: AbstractControl\r\n  ): Promise<{[key: string]: any}> | Observable<{[key: string]: any}> => {\r\n  if (typeof (control.value)=== 'string'){\r\n    return of(null);\r\n  }\r\n  const file = control.value as File;\r\n  const fileReader = new FileReader();\r\n  const frObs = Observable.create((observer: Observer<{[key: string]: any}>) => {\r\n    fileReader.addEventListener(\"loadend\", () => {\r\n      const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\r\n      let header = \"\";\r\n      let isValid = false;\r\n      for (let i = 0; i < arr.length; i++ ){\r\n        header += arr[i].toString(16);\r\n      }\r\n      switch (header) {\r\n        case \"89504e47\":\r\n          isValid = true;\r\n          break;\r\n        case \"ffd8ffe0\":\r\n        case \"ffd8ffe1\":\r\n        case \"ffd8ffe2\":\r\n        case \"ffd8ffe3\":\r\n        case \"ffd8ffe8\":\r\n          isValid = true;\r\n          break;\r\n        default:\r\n          isValid = false; // Or you can use the blob.type as fallback\r\n          break;\r\n      }\r\n      if (isValid) {\r\n        observer.next(null);\r\n      } else {\r\n        observer.next({ invalidMimeType: true });\r\n      }\r\n      observer.complete();\r\n    });\r\n    fileReader.readAsArrayBuffer(file);\r\n  });\r\n  return frObs;\r\n};\r\n","import { Component, OnInit, OnDestroy, /*EventEmitter, Output */} from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, ParamMap } from \"@angular/router\";\r\n\r\nimport { Post } from '../post.model';\r\nimport { PostsService } from '../posts.service';\r\nimport { mimeType } from './mime-type.validator';\r\nimport { Subscription } from 'rxjs';\r\nimport { AuthService } from 'src/app/auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-post-create',\r\n  templateUrl: './post-create.component.html',\r\n  styleUrls: ['./post-create.component.css']\r\n})\r\nexport class PostCreateComponent implements OnInit, OnDestroy {\r\n  enteredContent = '';\r\n  enteredTitle = '';\r\n  post: Post;\r\n  isLoading = false;\r\n  form: FormGroup;\r\n  imagePreview: string;\r\n  private mode = 'create'\r\n  private postId: string;\r\n  private authStatusSub: Subscription;\r\n\r\n\r\n  //@Output()\r\n  /*postCreated = new EventEmitter<Post>();/** Emitting events passes data from the child component to the parent\r\n    comoponent. Output@ makes angular aware that this is an event to be listened from the outside (parent component).\r\n    Notice that both EventEmitter and Output are libraries to be imported from angular core before they can be used */\r\n\r\n  constructor(\r\n    public postsService: PostsService,\r\n    public route: ActivatedRoute,\r\n    private authService: AuthService){}\r\n\r\n  ngOnInit(){\r\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(\r\n      authStatus => {\r\n        this.isLoading = false;\r\n      }\r\n    );\r\n    this.form = new FormGroup({\r\n      'title': new FormControl(null, {\r\n        validators: [Validators.required, Validators.minLength(3)]\r\n      }),\r\n      'content': new FormControl(null, {validators: [Validators.required]\r\n      }),\r\n\r\n      'image': new FormControl(null, {\r\n        validators: [Validators.required],\r\n        asyncValidators: [mimeType]})\r\n    });\r\n    this.route.paramMap.subscribe((paramMap: ParamMap) => {\r\n      if (paramMap.has('postId')) {\r\n        this.mode = \"edit\";\r\n        this.postId = paramMap.get('postId');\r\n        this.isLoading = true;\r\n        this.postsService.getPost(this.postId).subscribe(postData =>{\r\n          this.isLoading = false;\r\n          this.post = {\r\n            id:postData._id,\r\n            title: postData.title,\r\n            content: postData.content,\r\n            imagePath: postData.imagePath,\r\n            creator: postData.creator\r\n          };\r\n            this.form.setValue({\r\n              'title': this.post.title,\r\n              'content': this.post.content,\r\n              'image': this.post.imagePath\r\n            });\r\n        });\r\n      }else {\r\n        this.mode == \"create\";\r\n        this.postId = null\r\n      }\r\n    });\r\n  }\r\n\r\n  onFileSelect(event: Event){\r\n    const file = (event.target as HTMLInputElement).files[0];\r\n    this.form.patchValue({image: file});\r\n    this.form.get('image').updateValueAndValidity();\r\n    const reader = new FileReader();                //Image preview code start\r\n    reader.onload = () => {                         //create imagePreview variable as string\r\n      this.imagePreview = reader.result as string;  //create object of type FileReader\r\n    };                                              // use object FileReader to read data URL and pass file\r\n    reader.readAsDataURL(file);                     // Image preview code end\r\n  }\r\n\r\n  onSavePost(){\r\n   //~Popup to alert user~ alert('Post Added Tony!');\r\n  if (this.form.invalid){\r\n    return;\r\n  }\r\n  this.isLoading = true;\r\n  if (this.mode == \"create\"){\r\n    this.postsService.addPost(\r\n      this.form.value.title,\r\n      this.form.value.content,\r\n      this.form.value.image);\r\n    alert('Post Save Success!');\r\n  }else{\r\n    this.postsService.updatePost(\r\n      this.postId,\r\n      this.form.value.title,\r\n      this.form.value.content,\r\n      this.form.value.image);\r\n  }\r\n  this.form.reset();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.authStatusSub.unsubscribe();\r\n  }\r\n}\r\n","\r\n<mat-card>\r\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n  <form [formGroup]=\"form\" (submit)=\"onSavePost()\"  *ngIf=\"!isLoading\" enctype=\"multipart/form-data\">\r\n    <mat-form-field>\r\n      <input matInput type=\"text\"\r\n      formControlName=\"title\"\r\n      placeholder=\"Post Title\">\r\n        <mat-error *ngIf=\"form.get('title').invalid\">Post Title Needed!</mat-error>\r\n    </mat-form-field>\r\n\r\n    <div>\r\n      <button mat-stroked-button color='accent' type=\"button\" (click)=\"filer.click()\">Image Upload</button>\r\n      <input type=\"file\" #filer (change)=\"onFileSelect($event)\">\r\n    </div>\r\n    <div class=\"image-preview\" *ngIf=\"imagePreview !=='' && imagePreview && form.get('image').valid\">\r\n      <img [src]=\"imagePreview\" [alt]=\"form.value.title\">\r\n    </div>\r\n\r\n    <mat-form-field>\r\n      <textarea matInput rows=\"4\"\r\n      formControlName=\"content\"\r\n      placeholder=\"Post Content\"></textarea>\r\n        <mat-error *ngIf=\"form.get('content').invalid\">Post Content Needed!</mat-error>\r\n    </mat-form-field>\r\n\r\n    <button mat-raised-button color='primary' type=\"submit\">\r\n      Save Post\r\n    </button>\r\n\r\n  </form>\r\n</mat-card>\r\n\r\n\r\n\r\n<!--<hr> ~This is the horizontal line above button~-->\r\n\r\n<!--~EVENT BINDING- allows develpoers to listen to features in\r\n      a declaritive way. So instead of using javascript to use query selector and addEventListener to the element,\r\n      we simply go to our HTML page and add the name of the even we want to listen to in the case (click). Then\r\n      the equal to the name of the method that want to execute. Method logic should be in component class.~-->\r\n<!--~TWO WAY BINDING- setting and reading\r\n        of a value allowed in angular using [(ngModel)]/ Imported from the FormsModule, it is more efeccient than\r\n        property binding [value] and then reading the reference point #postInput as seen above~-->\r\n\r\n  <!--~~<p>{{newPost}}</p>~STRING INTERPOLATION- {{}} can take methods or property and output the current value\r\n    of a property and any changes to it~~\r\n    <mat-form-field>\r\n      <input matInput type=\"text\" [(ngModel)]=\"enteredTitle\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n      <textarea matInput rows=\"6\" [(ngModel)]=\"enteredContent\"></textarea> <!-~TWO WAY BINDING- setting and reading\r\n        of a value allowed in angular using [(ngModel)]/ Imported from the FormsModule, it is more efeccient than\r\n        property binding [value] and then reading the reference point #postInput as seen above~->\r\n    </mat-form-field>\r\n    <button mat-raised-button color='accent' (click)=\"onAdddPost()\">\r\n      Save Post\r\n    </button><!-~EVENT BINDING- allows develpoers to listen to features in\r\n      a declaritive way. So instead of using javascript to use query selector and addEventListener to the element,\r\n      we simply go to our HTML page and add the name of the even we want to listen to in the case (click). Then\r\n      the equal to the name of the method that want to execute. Method logic should be in component class.~-->\r\n","import {Component, /*Input,*/ OnInit, OnDestroy } from \"@angular/core\";\r\nimport { PageEvent } from '@angular/material/paginator';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { Post } from '../post.model';\r\nimport { PostsService } from '../posts.service';\r\nimport { AuthService } from 'src/app/auth/auth.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-post-list',\r\n  templateUrl: './post-list.component.html',\r\n  styleUrls: ['./post-list.component.css']\r\n})\r\nexport class PostListComponent implements OnInit, OnDestroy {\r\n // posts = [\r\n   // {title: 'First Post', content: 'This is the first post content'},\r\n   // {title: 'Second Post', content: 'This is the second post content'},\r\n   //  {title: 'Third Post', content: 'This is the third post content'}\r\n  //];\r\n //@Input()\r\n posts: Post[] = []; /**The Input@ make this post array bindable from the parent component via property binding.\r\n This is how we pass data from parent component to child component. Notice we import input from angular core. */\r\n isLoading = false;\r\n totalPosts = 0;\r\n postsPerPage = 2;\r\n currentPage = 1;\r\n pageSizeOptions = [1, 2, 5, 10];\r\n userAuthenticated = false\r\n userId: string;\r\n private postsSub: Subscription;\r\n private authStatusSub: Subscription;\r\n\r\n constructor(public postsService: PostsService,\r\n    private authService: AuthService) {}\r\n ngOnInit(){\r\n  this.isLoading = true;\r\n  this.postsService.getPosts(this.postsPerPage, this.currentPage);\r\n  this.userId = this.authService.getUserId();\r\n   this.postsSub= this.postsService\r\n    .getPostUpdateListener()\r\n    .subscribe((postData: {posts: Post[], postCount: number})=>{\r\n      this.isLoading = false;\r\n      this.totalPosts = postData.postCount;\r\n      this.posts = postData.posts;\r\n    });\r\n  this.userAuthenticated = this.authService.getUserAuth();\r\n  this.authStatusSub = this.authService\r\n    .getAuthStatusListener()\r\n    .subscribe(goodAuth => {\r\n      this.userAuthenticated = goodAuth;\r\n      this.userId = this.authService.getUserId();\r\n    });\r\n }\r\n onChangedPage(pageData: PageEvent){\r\n   //console.log(pageData);\r\n   this.isLoading = true;\r\n   this.currentPage = pageData.pageIndex + 1;\r\n   this.postsPerPage = pageData.pageSize;\r\n   this.postsService.getPosts(this.postsPerPage, this.currentPage);\r\n }\r\n\r\n onDelete(postId: string) {\r\n   this.isLoading = true;\r\n   this.postsService.deletePost(postId).subscribe(() => {\r\n     this.postsService.getPosts(this.postsPerPage, this.currentPage);\r\n   }, () => {\r\n     this.isLoading = false;\r\n   });\r\n }\r\n\r\n ngOnDestroy(){\r\n   this.postsSub.unsubscribe();\r\n   this.authStatusSub.unsubscribe()\r\n }\r\n\r\n}\r\n","<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n<mat-accordion multi=\"true\" *ngIf=\"posts.length > 0 && !isLoading\"><!--Multi allow multiple pannels open at once -->\r\n  <mat-expansion-panel *ngFor=\"let post of posts\"><!--*ngFor is a directive that is esentially\r\n  a helper tool to help iterate through a list of objects (think for loop)-->\r\n    <mat-expansion-panel-header>\r\n      {{ post.title }}\r\n    </mat-expansion-panel-header>\r\n    <div class=\"card\">\r\n    <div class=\"post-image\">\r\n      <img [src]=\"post.imagePath\" [alt]=\"post.title\">\r\n    </div>\r\n    </div>\r\n    <p>{{ post.content }}</p>\r\n    <mat-action-row *ngIf=\"userAuthenticated && userId == post.creator\"     n>\r\n      <a mat-button color=\"primary\" [routerLink]=\"['/edit', post.id]\">Edit</a>\r\n      <button mat-button color=\"warn\" (click)=\"onDelete(post.id)\">Delete</button>\r\n    </mat-action-row>\r\n  </mat-expansion-panel>\r\n</mat-accordion>\r\n<mat-paginator [length]=\"totalPosts\" [pageSize]=\"postsPerPage\" [pageSizeOptions]=\"pageSizeOptions\" (page)=\"onChangedPage($event)\" *ngIf=\"posts.length > 0\">\r\n\r\n</mat-paginator>\r\n<p class=\"info-text mat-body-1\" *ngIf=\"posts.length <= 0 && !isLoading\">No posts added yet!</p>\r\n","import { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms'; //So we can use ngModel\r\nimport { AngularMaterialModule } from '../angular-material.module';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { PostCreateComponent } from './post-create/post-create.component';\r\nimport { PostListComponent } from './post-list/post-list.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    PostCreateComponent,\r\n    PostListComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule, // so angular recognizes import\r\n    AngularMaterialModule,\r\n    RouterModule\r\n  ]\r\n})\r\nexport class PostsModule {}\r\n","import { Subject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { environment } from '../../environments/environment';\r\nimport { Post } from \"./post.model\";\r\n\r\nconst BACKEND_URL = environment.apiUrl + '/posts/';\r\n\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class PostsService {\r\n  private posts: Post[] = [];\r\n  private postsUpdated = new Subject<{posts: Post[], postCount: number}>();\r\n\r\n\r\nconstructor(private http: HttpClient, private router: Router) {}\r\n\r\n  getPosts(postsPerPage: number, currentPage: number) {\r\n    const queryParams = `?pageSize=${postsPerPage}&page=${currentPage}`\r\n    this.http\r\n    .get<{message: string, posts: any, maxPosts: number }>( //On the frontend our post.model expects an id w/o an '_', but getting\r\n      BACKEND_URL   //actual objects from the DB the id = _id. How do we fix this? By\r\n      + queryParams                       //converting the data we get back from the server before we subscribe.\r\n    ).pipe(map((postData) => {             //We convert this data using the .pipe() method, a built in observable method\r\n      return { posts: postData.posts.map(post => { //Inside the pipe() we must import and pass the map operator form 'rxjs.operator'\r\n        return {                          //Inside map() pass your res Data and execute a callback funtion that returns\r\n          title: post.title,              //your array of posts. The use map operator pass a single object post and on the\r\n          content: post.content,          //callback function define its fields that will be sent to client\r\n          id: post._id,\r\n          imagePath: post.imagePath,\r\n          creator: post.creator\r\n        };\r\n      }),\r\n      maxPosts: postData.maxPosts\r\n    };\r\n    }))\r\n    .subscribe((mutatedPostData) => {\r\n      //console.log(mutatedPostData);//test to see what data we're getting\r\n      this.posts = mutatedPostData.posts;\r\n      this.postsUpdated.next({\r\n        posts: [...this.posts],\r\n        postCount: mutatedPostData.maxPosts});\r\n    });\r\n  }\r\n\r\n  getPostUpdateListener(){\r\n    return this.postsUpdated.asObservable();\r\n  }\r\n  /**Observables allow us to emit data and listening to that data in different places of an application.\r\n   * With this we can subscribe to certain updates or changes and push these changes from a totally differnt\r\n   * place. The observer subscribes to the ovservable and there are three methods that they can call:\r\n   * next() error() complete(). These can be very useful when wrapping http requests.\r\n   *\r\n   * A subject is a special kind of observable; it's more active and allows us to manually call next().\r\n   */\r\n  getPost(id: string){\r\n    return this.http.get<{\r\n      _id: string;\r\n      title: string;\r\n      content:string,\r\n      imagePath: string,\r\n      creator: string\r\n    }>(\r\n      BACKEND_URL + id);\r\n  }\r\n\r\n  addPost(title: string, content: string, image: File){\r\n    //const post: Post={id: null, title: title, content: content}; ~no longer sending json data\r\n    const postData = new FormData();\r\n    postData.append(\"title\", title);\r\n    postData.append(\"content\", content);\r\n    postData.append(\"image\", image, title);\r\n    this.http\r\n    .post<{ message: string, post: Post }>(\r\n      BACKEND_URL,\r\n      postData)\r\n    .subscribe(responseData => {\r\n      this.router.navigate(['/']);\r\n    });\r\n\r\n  }\r\n                          //or post: Post\r\n  updatePost(id: string, title: string, content: string, image: File | string){\r\n   // const post: Post = {id: id, title:title, content:content, imagePath:null}\r\n   let postData: Post | FormData;\r\n   if (typeof(image) === 'object'){\r\n      postData = new FormData();\r\n      postData.append(\"id\", id);\r\n      postData.append(\"title\", title);\r\n      postData.append(\"content\", content);\r\n      postData.append(\"image\", image, title);\r\n    }else{\r\n      postData = {\r\n        id: id,\r\n        title: title,\r\n        content: content,\r\n        imagePath: image,\r\n        creator: null\r\n      };\r\n    }\r\n   this.http.put(BACKEND_URL+ id, postData)\r\n    .subscribe(response => {\r\n      console.log(response);\r\n      this.router.navigate(['/']);\r\n    });\r\n  }\r\n\r\n  deletePost(postId: string){\r\n    return this.http\r\n      .delete(BACKEND_URL + postId);\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: \"http://localhost:3000/api\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}