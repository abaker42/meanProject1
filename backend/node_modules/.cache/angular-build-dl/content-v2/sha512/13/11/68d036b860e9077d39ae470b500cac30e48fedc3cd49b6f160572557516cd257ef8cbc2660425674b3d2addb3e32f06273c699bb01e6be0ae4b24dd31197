{"version":3,"sources":["webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/login/login.component.html","webpack:///src/app/auth/signup/signup.component.ts","webpack:///src/app/auth/signup/signup.component.html"],"names":["routes","path","component","AuthRoutingModule","forChild","imports","exports","AuthModule","declarations","LoginComponent","authService","isLoading","authStatusSub","getAuthStatusListener","subscribe","authStatus","form","invalid","login","value","email","password","unsubscribe","templateUrl","styleUrls","SignupComponent","createUser"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'signup', component: SignupComponent}\r\n]\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { AngularMaterialModule } from '../angular-material.module';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponent,\r\n    SignupComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    AngularMaterialModule,\r\n    FormsModule,\r\n    AuthRoutingModule\r\n  ]\r\n})\r\nexport class AuthModule {}\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { AuthService } from '../auth.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy{\r\n  isLoading = false;\r\n  private authStatusSub: Subscription;\r\n\r\n  constructor(public authService: AuthService){}\r\n\r\n  ngOnInit() {\r\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(\r\n      authStatus => {\r\n        this.isLoading = false;\r\n      }\r\n    );\r\n  }\r\n\r\n  onLogin(form: NgForm){\r\n    //console.log(form.value); test if form is sending values\r\n    if (form.invalid){\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    this.authService.login(form.value.email, form.value.password);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.authStatusSub.unsubscribe()\r\n  }\r\n}\r\n","<mat-card>\r\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n  <form (submit)=\"onLogin(loginForm)\" #loginForm=\"ngForm\" *ngIf=\"!isLoading\">\r\n    <mat-form-field>\r\n      <input matInput name=\"email\" ngModel\r\n      type=\"email\"\r\n      placeholder=\"E-Mail\"\r\n      #emailInput=\"ngModel\"\r\n      required\r\n      email>\r\n        <mat-error *ngIf=\"emailInput.invalid\">Please enter a valid email.</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field>\r\n      <input type=\"password\" matInput\r\n      name=\"password\" ngModel\r\n      placeholder=\"Password\"\r\n      #passwordInput=\"ngModel\"\r\n      required>\r\n        <mat-error *ngIf=\"passwordInput.invalid\">Please enter a valid password.</mat-error>\r\n    </mat-form-field>\r\n\r\n    <button mat-raised-button color='primary' type=\"submit\" *ngIf=\"!isLoading\">\r\n      Login\r\n    </button>\r\n\r\n  </form>\r\n</mat-card>\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\n\r\nimport { AuthService } from \"../auth.service\";\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  templateUrl: \"./signup.component.html\",\r\n  styleUrls: [\"./signup.component.css\"]\r\n})\r\nexport class SignupComponent implements OnInit, OnDestroy{\r\n  isLoading = false;\r\n  private authStatusSub: Subscription;\r\n\r\n  constructor(public authService: AuthService) {}\r\n\r\n  ngOnInit() {\r\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(\r\n      authStatus => {\r\n        this.isLoading = false;\r\n      }\r\n    );\r\n  }\r\n\r\n  onSignup(form: NgForm){\r\n    //console.log(form.value);\r\n    if (form.invalid){\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    this.authService.createUser(form.value.email, form.value.password);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.authStatusSub.unsubscribe();\r\n  }\r\n}\r\n","<mat-card>\r\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n  <form (submit)=\"onSignup(signupForm)\" #signupForm=\"ngForm\" *ngIf=\"!isLoading\">\r\n    <mat-form-field>\r\n      <input matInput name=\"email\" ngModel\r\n      type=\"email\"\r\n      placeholder=\"E-Mail\"\r\n      #emailInput=\"ngModel\"\r\n      required\r\n      email>\r\n        <mat-error *ngIf=\"emailInput.invalid\">Please enter a valid email.</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field>\r\n      <input type=\"password\" matInput\r\n      name=\"password\" ngModel\r\n      placeholder=\"Password\"\r\n      #passwordInput=\"ngModel\"\r\n      required>\r\n        <mat-error *ngIf=\"passwordInput.invalid\">Please enter a valid password.</mat-error>\r\n    </mat-form-field>\r\n\r\n    <button mat-raised-button color='primary' type=\"submit\" *ngIf=\"!isLoading\">\r\n      Sign Up\r\n    </button>\r\n\r\n  </form>\r\n</mat-card>\r\n"]}